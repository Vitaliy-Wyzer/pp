#include <iostream>
#include <fstream>
#include <cstdlib>
#include <string>

using namespace std;

struct SKursy {
	string kurs;
};

struct SStudent {
	string imie, nazwisko;
	unsigned int liczba;
	SKursy * kursy;
	
	SStudent(): imie(""), nazwisko(""), liczba(0), kursy(nullptr) {}
	
	bool wczytaj(SStudent&, ifstream&);
	bool wypisz(SStudent&, ostream& out = cout);
	void usun() {
		if(kursy) {
			delete[] kursy;
			kursy = nullptr;
		}
	}

	~SStudent() {
		if (kursy) {
			delete[] kursy;
			kursy = nullptr;
		}
		imie = "";
		nazwisko = "";
		liczba = 0;
	}
};

struct SLista {
	string nazwa;
	unsigned int liczba;
	SStudent * studenci;
	
	SLista(): nazwa(""), liczba(0), studenci(nullptr) {}

	bool wczytaj(SLista&, ifstream&);
	bool wypisz(SLista&, ostream& out = cout);
	double srednia(const SLista&);
	SStudent maksymalna(SLista&);

	~SLista() {
		if (studenci) {
			delete[] studenci;
			studenci == nullptr;
		}
		nazwa = "";
		liczba = 0;
	}
};

bool SStudent::wczytaj(SStudent& student, ifstream& fin) {
	if(!fin.good()) {
		cerr << "Blad otwarcia pliku wejsciowego.\n";
		fin.ignore();
		fin.clear();
		fin.close();

		return 0;
	}
	if(!(fin >> student.imie)) {
		cerr << "Blad wczytywania imienia.\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	if(!(fin >> student.nazwisko)) {
		cerr << "Blad wczytywania nazwiska.\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	if(!(fin >> student.liczba)) {
		cerr << "Blad wczytywania liczby kursow.\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	if(student.liczba < 0) {
		cerr << "Liczba kursow musi byc dodatnia.\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	student.kursy = new SKursy[student.liczba];
	for (unsigned int i = 0; i<student.liczba; ++i) {
		if(!(fin >> student.kursy[i].kurs)) {
			cerr << "Blad wczytywania nazwy kursu.\n";
			fin.ignore();
			fin.clear();
			fin.close();
			return 0;
		}
	}
	return 1;
}

bool SStudent::wypisz(SStudent& st, ostream& out) {
	if(!out.good()) {
		cerr << "Blad strumienia wyjsciowego.\n";
		out.clear();
		return false;
	}
	out << st.imie;
	if(!out.good()) {
		cerr << "Blad wypisywania imienia.\n";
		out.clear();
		return false;
	}
	out << '\t' << st.nazwisko;
	if(!out.good()) {
		cerr << "Blad wypisywania nazwiska.\n";
		out.clear();
		return false;
	}
	out << '\t' << st.liczba;
	if(!out.good()) {
		cerr << "Blad wypisywania liczby niezaliczonych kursow.\n";
		out.clear();
		return false;
	}
	for(unsigned int i=0; i<st.liczba; ++i) {
		out << '\t' << st.kursy[i].kurs;
		if(!out.good()) {
			cerr << "Blad wypisywania " << i << ". niezaliczonego nkursu.\n";
			out.clear();
			return false;
		}
	}
	out << endl;
	return true;
}

bool SLista::wczytaj(SLista& lista, ifstream& fin) {
	if(!fin.good()) {
		cerr << "Blad otwarcia pliku wejsciowego.\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	if(!(fin >> lista.nazwa)) {
		cerr << "Blad wczytywania nazwy listy\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	if(!(fin >> lista.liczba)) {
		cerr << "Blad wczytywania nazwy listy\n";
		fin.ignore();
		fin.clear();
		fin.close();
		return 0;
	}
	lista.studenci = new SStudent[lista.liczba];
	for (unsigned int i=0; i<lista.liczba; i++) {
		lista.studenci[i].wczytaj(lista.studenci[i], fin);
		
	}
	return 1;
}

bool SLista::wypisz(SLista& l, ostream& out) {
	if(!out.good()) {
		cerr << "Blad strumienia wyjsciowego.\n";
		out.clear();
		return false;
	}
	out << l.nazwa << endl;
	if(!out.good()) {
		cerr << "Blad wypisywania nazwy listy.\n";
		out.clear();
		return false;
	}
	out << l.liczba << endl;
	if(!out.good()) {
		cerr << "Blad wypisywania liczby studentow.\n";
		out.clear();
		return false;
	}
	for(unsigned int i=0; i<l.liczba; ++i) {
		if(!(l.studenci[i].wypisz(l.studenci[i], out))) {
			cerr << "Napotkano blad.\n";
			out.clear();
			return false;
		}
	}
	return true;
}

double SLista::srednia(const SLista& l) {
	unsigned int suma = 0;
	for(unsigned int i=0; i<l.liczba; ++i) {
		suma += l.studenci[i].liczba;
	}
	return (double(suma)/double(l.liczba));
}

SStudent SLista::maksymalna(SLista& l) {
	unsigned int max = l.studenci[0].liczba;
	int index = 0;
	for(unsigned int i=1; i<l.liczba; ++i) {
		if(l.studenci[i].liczba > max) {
			max = l.studenci[i].liczba;
			index = i;
		}
	}
	return l.studenci[index];
}

bool kryterium(const int a, const int b) {
    return (a>b);
}

void sortuj(SLista& lista) {
    for (unsigned int i = 0; i<lista.liczba-1; i++) {
        for (unsigned int j = 0; j<lista.liczba-i-1; j++) {
            if (kryterium(lista.studenci[j].liczba, lista.studenci[j+1].liczba)) {
                swap(lista.studenci[j], lista.studenci[j+1]);
            }
        }
    }
}



int main(int argc, char** argv) {
	if(argc!=4) {
		cerr << "Prawidlowe uzycie: ./nazwa <fin> <fout> <fout2>\n";
		return 1;
	}
	
	ifstream in(argv[1]);
	ofstream fout(argv[2]);
	ofstream fout2(argv[3]);
	
	if(!(in.good() && fout.good() && fout2.good())) {
		cerr << "Blad strumienia plikowego.\n";
		in.ignore();
		in.clear();
		in.close();
		return 2;
	}
	
	SLista lista = SLista();
	
	if(lista.wczytaj(lista, in)) {
		lista.wypisz(lista);
		sortuj(lista);
		lista.wypisz(lista, fout2);
		SStudent student = lista.maksymalna(lista);
			if(!student.wypisz(student, fout)) {
				cerr << "Napotkano blad podczas wypisywania danych studenta z najwieksza liczba niezaliczonych kursow.\n";
				student.usun();
				return 3;
			}
	} else {
		cerr << "Nastapil blad podczas wczytywania listy.\n";
		in.ignore();
		in.clear();
		in.close();
		return 4;
	}
	
	double sr = lista.srednia(lista);
	cout << "Srednia liczba niezaliczonych kprzez studentow kursow:\n" << sr << '\n';
	
	for(unsigned int i=0; i<lista.liczba; ++i) {
		lista.studenci[i].usun();
	}
	in.close();

	return 0;
}

